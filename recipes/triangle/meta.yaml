{% set name = "triangle" %}
{% set version = "20200424" %}
{% set postfix = "wrapper" %}

package:
  name: {{ name|lower }}-{{ postfix|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 4a8501d4080b4fded6d109ef0cc0d515309bc8b89e119b37b6eaca95aa274a2d

build:
  # noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: "{{ PYTHON }} -m pip install . -vv"

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('c') }}
  host:
    - python
    - pip
    - numpy
    - cython >=0.24.0
  run:
    - triangle
    - python

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - triangle

about:
  home: https://rufat.be/triangle
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: LGPL-3.0-only
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: GPL
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE.txt
  summary: 'python interface to tetgen, a powerful and fast mesh generator'
  # The remaining entries in this section are optional, but recommended.
  description: |
     Triangle is a python wrapper around Jonathan Richard
     Shewchuk's two-dimensional quality mesh generator and
     delaunay triangulator library, available here. This
     implementation utilizes Cython to wrap the C API as closely
     as possible. The source is available on Github, and the
     documentation can be accessed at rufat.be/triangle.

  doc_url: https://rufat.be/triangle/
  dev_url: https://github.com/drufat/triangle

extra:
  recipe-maintainers:
       - Marcello-Sega
