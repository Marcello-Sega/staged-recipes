{% set name = "pytetgen" %}
{% set version = "0.2.2" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 4a8501d4080b4fded6d109ef0cc0d515309bc8b89e119b37b6eaca95aa274a2d

build:
  # noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: "{{ PYTHON }} -m pip install . -vv"
  skip: True  # [py<36]

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('cxx') }}
  host:
    - python
    - pip
  run:
    - python

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - pytetgen

about:
  home: https://github.com/Marcello-Sega/pytetgen
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: AGPL-3.0-or-later
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: GPL
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE.txt
  summary: 'python interface to tetgen, a powerful and fast mesh generator'
  # The remaining entries in this section are optional, but recommended.
  description: |
     This is a python interface to tetgen, a powerful and fast mesh
     generator (http://wias-berlin.de/software/tetgen/). It includes
     the tetgen source, v.1.5, and provides (so far) minimal bindings
     to be able to generate meshes in python. The basic interface
     follows (and can be used to replace) that of scipy.spatial.Delaunay
     (https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.Delaunay.html).
     2D points triangulation with consistent API is provided through
     the triangle package (https://rufat.be/triangle/).

  doc_url: https://github.com/Marcello-Sega/pytetgen
  dev_url: https://github.com/Marcello-Sega/pytetgen

extra:
  recipe-maintainers:
       - Marcello-Sega
